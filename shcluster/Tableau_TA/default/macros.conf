# many of these macros use a situational token $SituationFilter$
# this represents indexes, hosts, etc. you wish to act on
# update accordingly before implementing

[FullKnit(2)]
args = $SituationFilter$,VizSess
definition = $SituationFilter$ [search $SituationFilter$ sess=$VizSess$ OR ctx.client-session-id=$VizSess$ OR ctx.sess=$VizSess$ req!=- base_filename!="hyper*" | table req | dedup req | fields req] OR [search $SituationFilter$ sess=$VizSess$ OR ctx.client-session-id=$VizSess$ OR ctx.sess=$VizSess$ req!=- | table sess | dedup sess | fields sess]
iseval = 0

[WarnOrWorse]
definition = sev="warn" OR sev="error" OR sev="fatal"
iseval = 0

[NodeIDMap(1)]
args = $SituationFilter$
definition = $SituationFilter$ sourcetype=log4j processname=clustercontroller resolved | rex field=_raw "for workers: (?P<allnodes>.*$)" |  rex field=allnodes max_match=0 "(?<nodecombined>[^,\s]+)(,\s)?" | mvexpand nodecombined | rex max_match=0 field=nodecombined "(?P<nodehostall>[^\.\/]*)[^\/]*\/(?P<nodeIP>[^,\s]+)" | eval nodehost = lower(nodehostall) | stats count by nodehost, nodeIP | fields nodehost, nodeIP | join nodehost max=0 [search $SituationFilter$ source="*workgroup.yml" "worker*.host: " | rex max_match=0 "worker(?P<workerID>\d+)\.host: (?P<nodehost>.*$)" | stats count by workerID, nodehost | fields nodehost, workerID] | join workerID max=0 [search $SituationFilter$ source="*workgroup.yml" processname=tabadminagent worker_id | stats count by node_name, workerID | fields node_name, workerID]
iseval = 0

[vconnV3(2)]
args = $SituationFilter$, startterm
definition = $SituationFilter$ (sourcetype=tts:native processname=*minerva* [search $SituationFilter$ sourcetype=log4j [search $SituationFilter$ $startterm$ sourcetype=tts:native v.traceId=* | stats count by v.traceId | rename v.traceId as query | fields query] | stats count by WGSessID, req | eval sess = "*-" .WGSessID | fields sess]) OR ([search $SituationFilter$ $startterm$ sourcetype=tts:native v.traceId=* | stats count by v.traceId | rename v.traceId as query | fields query]) OR $startterm$ base_filename!=metrics*log | table sourcetype, processname, _time, _raw, base_filename | sort _time
iseval = 0

[realtime]
definition = | rex field=_raw "^{\"ts\":\"(?P<tsn>[\d\-:T.]*)\"" | eval ts1=strptime(tsn, "%Y-%m-%dT%H:%M:%S.%N") | rex field=_raw "^(?P<l4jtime>[\d:\- ]+)" | eval ts2=strptime(l4jtime, "%Y-%m-%d %H:%M:%S.%N") | eval realtime = coalesce(ts1, ts2)
iseval = 0